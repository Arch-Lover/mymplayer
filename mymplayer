#!/bin/bash

# Prompt user to select a file if not provided as an argument
select_file() {
    local input_file="$1"

    # If input file doesn't exist, prompt for file selection using Zenity
    if [ ! -f "$input_file" ]; then
        input_file=$(zenity --file-selection --title="My VLCplayer")
        if [ $? -eq 1 ]; then
            notify-send "Exit"
            exit 1
        fi
    fi

    echo "$input_file"
}

# Find a suitable subtitle file based on the main file name
find_subtitle() {
    local directory="$1"
    local main_file="$2"
    local found_subtitle=""

    # Look for potential subtitle files in the directory
    find "$directory" -maxdepth 1 -type f -name "$main_file.*" | while read -r line; do
        subtitle_extension="${line##*.}"
        supported_extensions="srt sub gsub aqt jss pjs psb rt smi stl ssf ssa ass usf"

        # Check if the subtitle file extension is supported
        for ext in $supported_extensions; do
            if [ "$subtitle_extension" == "$ext" ]; then
                found_subtitle="$line"
                break
            fi
        done

        [ -n "$found_subtitle" ] && break
    done

    # Notify if no suitable subtitle file is found
    [ -z "$found_subtitle" ] && notify-send "No suitable subtitle file found"
    echo "$found_subtitle"
}

# Detect subtitle's encoding, assuming Windows-1256 for unknown encoding
detect_encoding() {
    local directory="$1"
    local subtitle_file="$2"
    local encoding=$(file --mime-encoding -b "$subtitle_file")

    if [ "$encoding" == "unknown-8bit" ]; then
        encoding="WINDOWS-1256"
    fi

    echo "$encoding"
}

main() {
    local initial_file="$@"

    # Check if input file argument is missing
    if [ -z "$initial_file" ]; then
        notify-send "No input file specified"
        exit 1
    fi

    initial_file=$(select_file "$initial_file")

    # Extract file name and directory
    filename="${initial_file##*/}"
    directory="${initial_file%/*}"

    # Find a suitable subtitle file
    subtitle_file=$(find_subtitle "$directory" "$filename")
    if [ -n "$subtitle_file" ]; then
        subtitle_encoding=$(detect_encoding "$directory" "$subtitle_file")

        # Play the video file in VLC with detected subtitle and encoding
        vlc "$initial_file" --sub-file="$subtitle_file" --sub-encoding="$subtitle_encoding"
    fi

    exit
}

main "$@"
